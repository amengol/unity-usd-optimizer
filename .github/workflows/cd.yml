name: CD

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        lfs: true

    # Basic validation before release
    - name: Validate Release
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "Processing release for tag ${GITHUB_REF#refs/tags/}"
          
          # Check version format
          if [[ ! $GITHUB_REF =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag must follow semantic versioning (v1.2.3)"
            exit 1
          fi
          
          # Ensure required files exist
          if [ ! -f "README.md" ]; then
            echo "Error: README.md not found"
            exit 1
          fi
          
          # Create release notes directory if it doesn't exist
          mkdir -p ./release-notes
          
          # Generate basic release notes
          echo "# Release ${GITHUB_REF#refs/tags/}" > "./release-notes/RELEASE.md"
          echo "## Changes" >> "./release-notes/RELEASE.md"
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s" >> "./release-notes/RELEASE.md"
        fi

    # Store release artifacts
    - name: Store Release Info
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-artifact@v4.6.1
      with:
        name: Release-Info
        path: release-notes
        retention-days: 14
        if-no-files-found: warn
        overwrite: true

    # Create GitHub Release
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        gh release create ${GITHUB_REF#refs/tags/} \
          --title "Release ${GITHUB_REF#refs/tags/}" \
          --notes-file "./release-notes/RELEASE.md"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Commented out Unity-dependent parts
# To enable these in the future when you have a Unity license:
# 1. Uncomment the section below
# 2. Add the following secrets to your repository:
#    - UNITY_EMAIL
#    - UNITY_PASSWORD
#    - UNITY_LICENSE
# 3. Remove the prepare-release job above if you want to only keep Unity build

#  build:
#    name: Build Package
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v3
#    
#    - name: Unity - Activate
#      uses: game-ci/unity-activate@v2
#      env:
#        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#    
#    - name: Cache Library
#      uses: actions/cache@v3
#      with:
#        path: Library
#        key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
#        restore-keys: |
#          Library-
#    
#    - name: Build Unity Package
#      uses: game-ci/unity-builder@v2
#      env:
#        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#      with:
#        projectPath: .
#        unityVersion: 2021.3.4f1
#        targetPlatform: StandaloneWindows64
#        buildName: USDSceneOptimizer
#        buildsPath: build
#        customParameters: -nographics -batchmode
#    
#    - name: Store Build
#      uses: actions/upload-artifact@v4.6.1
#      with:
#        name: Build
#        path: build
#        retention-days: 14
#        compression-level: 6
#        if-no-files-found: error
#        overwrite: true
#    
#    - name: Create Release
#      if: startsWith(github.ref, 'refs/tags/')
#      run: |
#        gh release create ${{ github.ref_name }} \
#          --title "Release ${{ github.ref_name }}" \
#          --notes "Release ${{ github.ref_name }}" \
#          ./build/StandaloneWindows64/Unity-USD-Scene-Optimizer.unitypackage
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 